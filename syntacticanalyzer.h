#ifndef SYNTACTICANALYZER_H
#define SYNTACTICANALYZER_H
#include "generic.h"
#include <map>
#include <string>
#include <vector>
//#include "/home/tom/mySchool/PJP/gcc/gcc-src/gcc/sfe/lex.yy.c"
// Lexical Analyzer was Generated by GNU FLEX
#include "lex.yy.c"


struct TFunc { 
    tree params;                      
    tree resdecl;                     
    tree fcdecl;                      
    std::map<std::string, tree> localVarMap;  
};


bool myMatch(const std::string & a, const char * b);


void handleError(const char * format, ...);


void print(const std::string & str);


class SyntacticAnalyzer
{
public:

    SyntacticAnalyzer(FILE * inputFile, FILE * outputFile);


    ~SyntacticAnalyzer();

public:

    void parseFile();

private:

    void drop(TokenID tid);


    void dropStr(std::string & str);


    void dropInt(int & num);

    // ----------------------------------------------
    // Implementation of Grammar Symbol
    // ----------------------------------------------


    void S();


    void zb(tree globals);


    void zb2(tree globals);


    void constbl(std::map<std::string, tree> & vmap);

 
    tree varbl(tree decls, std::map<std::string, tree> & vmap, bool global);

  
    void idlist(std::vector<std::string> & names);


    void idlist2(std::vector<std::string> & names);

    bool type(int & from, int & to);


    void interval(int & from, int & to);


    void funcDec();


    void parameters(tree & param_decl, tree & params);


    bool funcDec2(tree & var, tree & stmt);

    tree optional();


    tree optional2();


    tree main(tree globals);


    tree body(tree decls, tree & bind, tree & blk);


    tree block();


    void recursion(tree & stmt);


    tree command(tree & statementParam);


    tree build_return();


    tree ifconstruction();


    tree elseblock();


    tree forconstruction(tree & statementParam);


    void where(bool & to);


    tree whileconstruction();


    tree assigment(const std::string & name);


    tree call(const std::string & name);


    void val_list(std::vector<tree> & vec);


    tree logical_expression();


    tree LE2(tree left);

    tree LT();


    tree LT2(tree left);


    tree LF();


    tree LF2(tree left);


    tree aritmetic_expression();


    tree AE2(tree left);


    tree AT();


    tree AT2(tree left);


    tree AF();


    tree findVariable(const std::string & name);


    tree findSimpleVariable(const std::string & name);


    tree findFunction(const std::string & name, bool onlyCheck = false);


    TFunc * findFunctionFw(const std::string & name);

 
    void registerGlobalVarible(tree gv);


    void registerFunction(tree fc);


    void tree_dump_original(tree fndecl);


    bool nextToken();

public:
    std::map<std::string, tree> funcMap;       
    std::map<std::string, tree> varMap;        
    std::map<std::string, tree> localVarMap;   
    std::map<std::string, int> idxMap;         
    std::map<std::string, TFunc *> funcFwMap;  

    tree statement;             
    vec<tree, va_gc> * fileVec; 
    bool isFunc;                
};

